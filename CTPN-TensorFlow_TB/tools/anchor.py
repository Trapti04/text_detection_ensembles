"""Utilities for generating anchors"""

import numpy as np


def generate_basic_anchors(sizes, base_size=16):
    """Generate basic anchors (relative coordinates) based on the provided
        width size.

    Args:
        base_size: the width size of generated anchors.

    Returns:
        anchors: a numpy array with shape [10, 4] contains the coordinates
            of basic anchors.
    """
    base_anchor = np.array([0, 0, base_size - 1, base_size - 1], np.int32)
    anchors = np.apply_along_axis(scale_anchor, axis=1, arr=sizes,
                                  anchor=base_anchor, base_size=base_size)

    return anchors


def scale_anchor(shape, anchor, base_size):
    """Scale anchors based on provided shape (center and height).

    Args:
        shape: a numpy array contains the shape (center and height) of scaled
            anchors
        anchor: a numpy array contains the coordinates of anchors.

    Returns: a numpy array contains the coordinates of calculated anchors.
    """
    x_ctr = (anchor[0] + anchor[2]) * 0.5
    y_ctr = (anchor[1] + anchor[3]) * 0.5
    scaled_anchor = anchor.copy()
    scaled_anchor[0] = x_ctr - shape[1] / 2
    scaled_anchor[2] = x_ctr + shape[1] / 2
    scaled_anchor[1] = y_ctr - shape[0] / 2
    scaled_anchor[3] = y_ctr + shape[0] / 2

    return scaled_anchor


def basic_anchors(anchor_num):
    """Generating basic anchors.

    Args:
        anchor_num: number of anchors.

    Returns: a numpy array contains the coodinates of basic anchors.
    """
    heights = np.array([11, 16, 23, 33, 48, 68, 97, 139, 198, 283],
                       dtype=np.int32)
    widths = np.ones(len(heights), dtype=np.int32) * 16
    sizes = np.column_stack((heights, widths))

    return generate_basic_anchors(sizes)


def locate_anchors(feat_map_size, feat_stride, anchor_num=10):
    """Generate anchors corresponding to a feature map generated by a
        Convolutional Neural Networks..

    Args:
        feat_map_size: an numpy array with shape [2] contains the size of
            feature map.
        feat_stride: the stride on feature map.
        anchor_num: the number of generated anchor at each point on feature
            map.

    Returns:
        anchors: a numpy array with shape [num_anchors, 4] contains the
            coordinates of generated anchors.
    """
    basic_anchors_ = basic_anchors(anchor_num)
    anchors = np.zeros(
        (basic_anchors_.shape[0] * feat_map_size[0] * feat_map_size[1], 4), np.int32)
    index = 0
    for y_ in range(feat_map_size[0]):
        for x_ in range(feat_map_size[1]):
            shift = np.array([x_, y_, x_, y_]) * feat_stride
            anchors[index:index + basic_anchors_.shape[0],
                    :] = basic_anchors_ + shift
            index += basic_anchors_.shape[0]

    return anchors
